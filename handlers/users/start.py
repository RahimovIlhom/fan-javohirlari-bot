import os

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.types import ReplyKeyboardRemove, InputFile, ContentType

from data.config import ADMINS, CHANNELS, sciences_dict
from filters import IsPrivate
from keyboards.default import language_markup, menu_markup, menu_test_ru, id_card_ru_markup, \
    id_card_uz_markup
from keyboards.default import menu_user_markup
from keyboards.inline.checksubs import make_check_channels_subs
from loader import dp, db, bot
from states import RegisterStatesGroup, PINFLStateGroup
from utils.misc import subscription


@dp.message_handler(IsPrivate(), CommandStart(), state='*')
async def bot_start(message: types.Message, state: FSMContext):
    if str(message.from_user.id) in ADMINS:
        await message.answer("Menu", reply_markup=menu_markup)
        await state.finish()
        return
    user = await db.select_user(message.from_user.id)
    if user:
        if user[-1] is None:
            if user[2] == 'uzbek':
                result = (
                    "‚ö†Ô∏è Botdan foydalanish uchun ID-kartangizdagi Shaxsiy raqamingizni kiriting. ID karta olmagan "
                    "bo‚Äôlsangiz pastda ‚ÄúHali ID karta olmaganman‚Äù tugmasini bosing.")
                image = InputFile('data/images/pinfl.jpg')
                image_url = "http://telegra.ph//file/97b3043fbcdc89ba48360.jpg"
                markup = id_card_uz_markup
            else:
                result = (
                    "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä, —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–∞ ID-–∫–∞—Ä—Ç–µ. –ï—Å–ª–∏ –≤—ã –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ "
                    "ID-–∫–∞—Ä—Ç—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–Ø –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª ID-–∫–∞—Ä—Ç—É¬ª –Ω–∏–∂–µ.")
                image = InputFile('data/images/pinfl_ru.jpg')
                image_url = "http://telegra.ph//file/e815e58a3c4c08948b617.jpg"
                markup = id_card_ru_markup
            try:
                await message.answer_photo(image_url, caption=result, reply_markup=markup)
            except:
                await message.answer_photo(image, caption=result, reply_markup=markup)

            await state.set_data({'language': user[2]})
            await PINFLStateGroup.pinfl.set()
            return
        if user[2] == 'uzbek':
            await message.answer("Test topshirish uchun quyidagi tugmadan foydalaning üëá", reply_markup=await menu_user_markup(message.from_user.id))
        else:
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç üëá", reply_markup=menu_test_ru)
        await state.finish()
        return
    await message.answer(f"Assalomu alaykum! \"Fan javohirlari\" loyihasining rasmiy botiga xush kelibsiz. "
                         f"Iltimos, tilni tanlang.\n\n"
                         f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ \"Fan javohirlari\". –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫.",
                         reply_markup=language_markup)
    await state.set_state(RegisterStatesGroup.language)


@dp.message_handler(IsPrivate(), commands=['re_register'])
async def re_register(msg: types.Message, state: FSMContext):
    if str(msg.from_user.id) in ADMINS:
        await msg.answer("Admin uchun ro'yxatdan o'tish shart emas!")
        return
    user = await db.select_user(msg.from_user.id)
    if user:
        await state.set_data({'re_register': True})
        await msg.answer("Iltimos, tilni tanlang.\n\n"
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫.", reply_markup=language_markup)
        await state.set_state(RegisterStatesGroup.language)
    else:
        await msg.answer("Siz hali ro'yxatdan o'tmagansiz.\n"
                         "Ro'yxatdan o'tish uchun - /start\n\n"
                         "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å.\n–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - /start")


@dp.message_handler(state=PINFLStateGroup.pinfl)
async def add_pinfl_user(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get('language')
    if language == 'uzbek':
        if msg.text != "Hali ID karta olmaganman":
            if len(msg.text) != 14:
                await msg.answer("Shaxsiy raqam to'g'ri kiritilmadi!\nIltimos qayta kiriting:")
                return
            if not msg.text.isnumeric():
                await msg.answer("Shaxsiy raqam faqat raqamlardan tashkil topadi!\nIltimos qayta kiriting:")
                return
        info = "Ma'lumot saqlandi.\nTest topshirish uchun quyidagi tugmadan foydalaning üëá"
        markup = await menu_user_markup(msg.from_user.id)
    else:
        if msg.text != "–Ø –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª(–∞) ID-–∫–∞—Ä—Ç—É":
            if len(msg.text) != 14:
                await msg.answer("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            if not msg.text.isnumeric():
                await msg.answer("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, "
                                 "–≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
        info = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç üëá"
        markup = menu_test_ru
    await db.update_pinfl(msg.from_user.id, msg.text)
    await msg.answer(info, reply_markup=markup)
    await state.finish()


@dp.callback_query_handler(text="check_subs", state='*')
async def checker(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    data = await state.get_data()
    user = await db.select_user(call.from_user.id)
    result = str()
    channels = []
    final_status = True
    for channel in CHANNELS:
        status = await subscription.check(user_id=call.from_user.id,
                                          channel=channel)
        channel = await bot.get_chat(channel)
        final_status *= status
        if not status:
            channels.append(channel)
            if user[2] == 'uzbek':
                result += f"‚ÑπÔ∏è <b>\"{channel.title}\"</b> kanaliga obuna bo'lishingiz lozim!\n\n"
            else:
                result += f"‚ÑπÔ∏è –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª <b>¬´{channel.title}¬ª</b>!\n\n"
    await call.message.delete()
    info_uz = (
        "Arizangiz qabul qilinishi uchun, iltimos, \"Fan javohirlari\" telegram kanaliga a'zo bo'ling. U yerda "
        "loyiha haqida ma'lumotlar, fanlar bo'yicha testlar va ularning javoblari, olimpiada o'tkazilish "
        "kunlari e'lon qilinib boriladi. Shu bilan birga, kanalda abituriyentlar uchun qiziq bo'lgan "
        "ma'lumotlar, talabalar hayoti, hajviy postlar berib boriladi.")
    success_uz = ("‚úÖ Tabriklaymiz, siz ro'yxatdan o'tdingiz. O'zingizni sinab ko'rish uchun test topshirmoqchi "
                  "bo'lsangiz, quyidagi \"Test topshirish\" tugmasini bosing.")
    info_ru = (
        "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–∞—à—É –∑–∞—è–≤–∫—É –ø—Ä–∏–Ω—è–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ Telegram-–∫–∞–Ω–∞–ª ¬´Fan javohirlari¬ª. –¢–∞–º "
        "–ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ, —Ç–µ—Å—Ç—ã –ø–æ —Ä–∞–∑–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º –∏   –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∏—Ö, –∞ —Ç–∞–∫–∂–µ –¥–∞—Ç—ã "
        "–ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ª–∏–º–ø–∏–∞–¥—ã. –¢–∞–∫–∂–µ –Ω–∞ –∫–∞–Ω–∞–ª–µ –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è   –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤, "
        "–ø–æ—Å—Ç—ã –ø—Ä–æ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫—É—é –∂–∏–∑–Ω—å, —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Å—Ç—ã.")
    success_ru = ("‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —Ç–µ–ø–µ—Ä—å –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è, "
                  "–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç¬ª.")
    if final_status:
        if user[2] == 'uzbek':
            result = success_uz if data.get('level') == 'registration' else "‚úÖ Barcha kanallarga a'zo bo'ldingiz!"
            markup = await menu_user_markup(call.from_user.id)
        else:
            result = success_ru if data.get('level') == 'registration' else "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!"
            markup = menu_test_ru
        await call.message.answer(result, reply_markup=markup, disable_web_page_preview=True)
        await state.reset_state()
        await state.finish()
        return
    if user[2] == 'uzbek':
        result += info_uz if data.get('level') == 'registration' else ("‚ö†Ô∏è Botdan foydalanish uchun quyidagi "
                                                                       "kanallarga obuna bo'ling:\n")
    else:
        result += info_ru if data.get('level') == 'registration' else ("‚ö†Ô∏è –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è "
                                                                       "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:\n")
    await call.message.answer(result, reply_markup=await make_check_channels_subs(channels, lang=user[2]),
                              disable_web_page_preview=True)


@dp.callback_query_handler(text="download_certificate")
async def send_cer(call: types.CallbackQuery):
    user = await db.select_user(call.from_user.id)
    await call.message.delete()
    if user[2] == 'uzbek':
        test_result = await db.select_result_test_user(call.from_user.id, user[8], True)
    else:
        test_result = await db.select_result_test_user(call.from_user.id, sciences_dict[user[8]], True)
    if test_result:
        if test_result[13]:
            await call.message.answer_photo(test_result[13])
            return
    await call.message.answer("Certificate not found")
